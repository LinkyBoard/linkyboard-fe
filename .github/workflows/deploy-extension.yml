name: Deploy Extension

on:
  pull_request:
    types: [closed]

jobs:
  build:
    if: ${{ contains(github.event.pull_request.title, '[EXTENSION]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable Corepack & Prepare pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install

      - name: Create .env.production file
        run: |
          echo "${{ secrets.EXTENSION_ENV }}" > apps/extension/.env.production

      - name: Create manifest.json file
        run: |
          echo '${{ secrets.MANIFEST_JSON }}' > apps/extension/manifest.json
          echo "=== Manifest.json validation ==="
          cat apps/extension/manifest.json
          echo "=== JSON validation ==="
          python3 -m json.tool apps/extension/manifest.json

      - name: Auto-increment version
        run: |
          cd apps/extension
          # 현재 버전 읽기
          CURRENT_VERSION=$(python3 -c "import json; data=json.load(open('manifest.json')); print(data['version'])")
          echo "Current version: $CURRENT_VERSION"

          # 버전을 점으로 분리
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]:-0}

          # 패치 버전 증가
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "New version: $NEW_VERSION"

          # manifest.json 업데이트
          python3 -c "
          import json
          with open('manifest.json', 'r') as f:
              data = json.load(f)
          data['version'] = '$NEW_VERSION'
          with open('manifest.json', 'w') as f:
              json.dump(data, f, indent=2)
          "

          echo "=== Updated manifest.json ==="
          cat manifest.json

      - name: Build extension
        run: |
          pnpm build:extension

      - name: Copy files to prod directory
        run: |
          cd apps/extension
          mkdir -p prod
          cp manifest.json prod/
          cp service-worker.js prod/
          cp .env.production prod/
          cp -r public/* prod/
          cp -r dist/* prod/

      - name: Create zip file
        run: |
          cd apps/extension
          zip -r prod/extension.zip prod/

      - name: Upload & release
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: apps/extension/prod/extension.zip
          extension-id: ${{ secrets.EXTENSION_ID }}
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          refresh-token: ${{ secrets.REFRESH_TOKEN }}
          publish-target: trustedTesters
          publish: false
